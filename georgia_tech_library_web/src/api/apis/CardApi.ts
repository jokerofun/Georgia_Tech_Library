/* tslint:disable */
/* eslint-disable */
/**
 * Georgia_Tech_Library_API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Card,
    ProblemDetails,
} from '../models';

export interface ApiCardDeleteDeleteRequest {
    card?: Card;
}

export interface ApiCardGetByCardNumberCardNumberGetRequest {
    cardNumber: string;
}

export interface ApiCardInsertPostRequest {
    card?: Card;
}

export interface ApiCardUpdatePutRequest {
    card?: Card;
}

/**
 * CardApi - interface
 * 
 * @export
 * @interface CardApiInterface
 */
export interface CardApiInterface {
    /**
     * 
     * @param {Card} [card] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiInterface
     */
    apiCardDeleteDeleteRaw(requestParameters: ApiCardDeleteDeleteRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCardDeleteDelete(requestParameters: ApiCardDeleteDeleteRequest): Promise<void>;

    /**
     * 
     * @param {string} cardNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiInterface
     */
    apiCardGetByCardNumberCardNumberGetRaw(requestParameters: ApiCardGetByCardNumberCardNumberGetRequest): Promise<runtime.ApiResponse<Card>>;

    /**
     */
    apiCardGetByCardNumberCardNumberGet(requestParameters: ApiCardGetByCardNumberCardNumberGetRequest): Promise<Card>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiInterface
     */
    apiCardGetListGetRaw(): Promise<runtime.ApiResponse<Array<Card>>>;

    /**
     */
    apiCardGetListGet(): Promise<Array<Card>>;

    /**
     * 
     * @param {Card} [card] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiInterface
     */
    apiCardInsertPostRaw(requestParameters: ApiCardInsertPostRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCardInsertPost(requestParameters: ApiCardInsertPostRequest): Promise<void>;

    /**
     * 
     * @param {Card} [card] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiInterface
     */
    apiCardUpdatePutRaw(requestParameters: ApiCardUpdatePutRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiCardUpdatePut(requestParameters: ApiCardUpdatePutRequest): Promise<void>;

}

/**
 * 
 */
export class CardApi extends runtime.BaseAPI implements CardApiInterface {

    /**
     */
    async apiCardDeleteDeleteRaw(requestParameters: ApiCardDeleteDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Card/Delete`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.card,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCardDeleteDelete(requestParameters: ApiCardDeleteDeleteRequest): Promise<void> {
        await this.apiCardDeleteDeleteRaw(requestParameters);
    }

    /**
     */
    async apiCardGetByCardNumberCardNumberGetRaw(requestParameters: ApiCardGetByCardNumberCardNumberGetRequest): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling apiCardGetByCardNumberCardNumberGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Card/GetByCardNumber/{cardNumber}`.replace(`{${"cardNumber"}}`, encodeURIComponent(String(requestParameters.cardNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiCardGetByCardNumberCardNumberGet(requestParameters: ApiCardGetByCardNumberCardNumberGetRequest): Promise<Card> {
        const response = await this.apiCardGetByCardNumberCardNumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCardGetListGetRaw(): Promise<runtime.ApiResponse<Array<Card>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Card/GetList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiCardGetListGet(): Promise<Array<Card>> {
        const response = await this.apiCardGetListGetRaw();
        return await response.value();
    }

    /**
     */
    async apiCardInsertPostRaw(requestParameters: ApiCardInsertPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Card/Insert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.card,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCardInsertPost(requestParameters: ApiCardInsertPostRequest): Promise<void> {
        await this.apiCardInsertPostRaw(requestParameters);
    }

    /**
     */
    async apiCardUpdatePutRaw(requestParameters: ApiCardUpdatePutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Card/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.card,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCardUpdatePut(requestParameters: ApiCardUpdatePutRequest): Promise<void> {
        await this.apiCardUpdatePutRaw(requestParameters);
    }

}
